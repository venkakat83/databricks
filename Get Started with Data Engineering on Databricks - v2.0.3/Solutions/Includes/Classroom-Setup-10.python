{"version":"NotebookV1","origId":2730474723967882,"name":"Classroom-Setup-10","language":"python","commands":[{"version":"CommandV1","origId":2730474723967883,"guid":"d601c9fd-acf3-4be5-8d82-0131ea42bddb","subtype":"command","commandType":"auto","position":2.0,"command":"%run ../Includes/_common","commandVersion":1,"state":"finished","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[],"subcommandOptions":null,"contentSha256Hex":null,"nuid":"86fed4d6-536a-4254-9100-6b334c7efd3b"},{"version":"CommandV1","origId":2730474723967884,"guid":"00f24251-79da-4c8f-8e84-f72f8212432c","subtype":"command","commandType":"auto","position":3.0,"command":"lesson_name = \"jobs_demo\"\nDA = DBAcademyHelper(course_config=course_config,\n                     lesson_config=lesson_config)","commandVersion":1,"state":"finished","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[],"subcommandOptions":null,"contentSha256Hex":null,"nuid":"9ce3a0d3-b68a-4920-a8ad-aa53bcbab59a"},{"version":"CommandV1","origId":2730474723967885,"guid":"e883a3b1-4c4a-4706-b69c-fb7c1e04952d","subtype":"command","commandType":"auto","position":4.0,"command":"class JobConfig():\n    def __init__(self, job_name, notebook):\n        self.job_name = job_name\n        self.notebook = notebook\n    \n    def __repr__(self):\n        content =  f\"Name:      {self.job_name}\"\n        content += f\"Notebooks: {self.notebook}\"\n        return content\n","commandVersion":1,"state":"finished","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[],"subcommandOptions":null,"contentSha256Hex":null,"nuid":"8d136a25-0db0-49b2-9cc5-bce52ebba7ec"},{"version":"CommandV1","origId":2730474723967886,"guid":"96c7d6b8-ed2f-4f17-a376-3d5f84aedeea","subtype":"command","commandType":"auto","position":5.0,"command":"@DBAcademyHelper.monkey_patch\ndef get_job_config(self):\n    \n    unique_name = DA.unique_name(sep=\"-\")\n    job_name = f\"{unique_name}: Example Job\"\n    \n    parts = dbutils.entry_point.getDbutils().notebook().getContext().notebookPath().getOrElse(None).split(\"/\")[:-1]\n    notebook = \"/\".join(parts) + \"/2.3 - Demo - Data Management\"\n\n    return JobConfig(job_name, notebook)\n","commandVersion":1,"state":"finished","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[],"subcommandOptions":null,"contentSha256Hex":null,"nuid":"657bd5f0-dfef-4c48-b274-e52b1d76596b"},{"version":"CommandV1","origId":2730474723967887,"guid":"20d83d06-ffe7-4061-851e-8083369f2781","subtype":"command","commandType":"auto","position":6.0,"command":"@DBAcademyHelper.monkey_patch\ndef update_cluster_params(self, params: dict, task_indexes: list):\n\n    if not self.is_smoke_test():\n        return params\n    \n    for task_index in task_indexes:\n        # Need to modify the parameters to run run as a smoke-test.\n        task = params.get(\"tasks\")[task_index]\n        del task[\"existing_cluster_id\"]\n\n        cluster_params =         {\n            \"num_workers\": \"0\",\n            \"spark_version\": self.client.clusters().get_current_spark_version(),\n            \"spark_conf\": {\n              \"spark.master\": \"local[*]\"\n            },\n        }\n\n        instance_pool_id = self.client.clusters().get_current_instance_pool_id()\n        if instance_pool_id is not None: cluster_params[\"instance_pool_id\"] = self.client.clusters().get_current_instance_pool_id()\n        else:                            cluster_params[\"node_type_id\"] = self.client.clusters().get_current_node_type_id()\n\n        task[\"new_cluster\"] = cluster_params\n        \n    return params\n","commandVersion":1,"state":"finished","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[],"subcommandOptions":null,"contentSha256Hex":null,"nuid":"f46546c4-8402-4875-b6c1-acf671fe03d3"},{"version":"CommandV1","origId":2730474723967888,"guid":"e0da9a5f-46ac-48fe-a961-1f1178205625","subtype":"command","commandType":"auto","position":7.0,"command":"@DBAcademyHelper.monkey_patch\ndef print_job_config_v1(self):\n    \"Provided by DBAcademy, this function renders the configuration of the job as HTML\"\n    job_config = self.get_job_config()\n    \n    displayHTML(f\"\"\"<table style=\"width:100%\">\n    <tr>\n        <td style=\"white-space:nowrap; width:1em\">Job Name:</td>\n        <td><input type=\"text\" value=\"{job_config.job_name}\" style=\"width:100%\"></td></tr>\n    <tr>\n        <td style=\"white-space:nowrap; width:1em\">Reset Notebook Path:</td>\n        <td><input type=\"text\" value=\"{job_config.notebook}\" style=\"width:100%\"></td></tr>\n\n    </table>\"\"\")    \n    ","commandVersion":1,"state":"finished","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[],"subcommandOptions":null,"contentSha256Hex":null,"nuid":"49869449-46c8-4ede-97e6-50cd4c7116c0"},{"version":"CommandV1","origId":2730474723967889,"guid":"d723220a-014c-47c7-b666-15b77be045a8","subtype":"command","commandType":"auto","position":8.0,"command":"@DBAcademyHelper.monkey_patch\ndef create_job_v1(self):\n    \"Provided by DBAcademy, this function creates the prescribed job\"\n    import re\n    \n    job_config = self.get_job_config()\n\n    self.client.jobs.delete_by_name(job_config.job_name, success_only=False)\n    cluster_id = dbgems.get_tags().get(\"clusterId\")\n\n    build_name = re.sub(r\"[^a-zA-Z\\d]\", \"-\", self.course_config.course_name)\n    while \"--\" in build_name: build_name = build_name.replace(\"--\", \"-\")\n    \n    params = {\n        \"name\": job_config.job_name,\n        \"tags\": {\n            \"dbacademy.course\": build_name,\n            \"dbacademy.source\": build_name\n        },\n        \"email_notifications\": {},\n        \"timeout_seconds\": 7200,\n        \"max_concurrent_runs\": 1,\n        \"format\": \"MULTI_TASK\",\n        \"tasks\": [\n            {\n                \"task_key\": \"Reset\",\n                \"libraries\": [],\n                \"notebook_task\": {\n                    \"notebook_path\": job_config.notebook,\n                    \"base_parameters\": []\n                },\n                \"existing_cluster_id\": cluster_id\n            },\n        ],\n    }\n    params = self.update_cluster_params(params, [0])\n    \n    create_response = self.client.jobs().create(params)\n    job_id = create_response.get(\"job_id\")\n    \n    print(f\"Created job #{job_id}\")\n","commandVersion":1,"state":"finished","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[],"subcommandOptions":null,"contentSha256Hex":null,"nuid":"e045c2b4-c650-484a-b378-c46cbec2a8ca"},{"version":"CommandV1","origId":2730474723967890,"guid":"5a3d432a-67e1-4843-8d51-148df988567f","subtype":"command","commandType":"auto","position":9.0,"command":"@DBAcademyHelper.monkey_patch\ndef validate_job_v1_config(self):\n    \"Provided by DBAcademy, this function validates the configuration of the job\"\n    import json\n    \n    job_config = self.get_job_config()\n\n    job = self.client.jobs.get_by_name(job_config.job_name)\n    assert job is not None, f\"The job named \\\"{job_config.job_name}\\\" doesn't exist. Double check the spelling.\"\n\n    # print(json.dumps(job, indent=4))\n    \n    settings = job.get(\"settings\")\n    \n    if settings.get(\"format\") == \"SINGLE_TASK\":\n        notebook_path = settings.get(\"notebook_task\", {}).get(\"notebook_path\")\n        actual_cluster_id = settings.get(\"existing_cluster_id\", None)\n        #task_key = settings.get(\"task_key\", None)\n    else:\n        tasks = settings.get(\"tasks\", [])\n        assert len(tasks) == 1, f\"Expected one task, found {len(tasks)}.\"\n\n        notebook_path = tasks[0].get(\"notebook_task\", {}).get(\"notebook_path\")\n        actual_cluster_id = tasks[0].get(\"existing_cluster_id\", None)\n        \n        task_key = tasks[0].get(\"task_key\", None)\n        assert task_key == \"Rest\", f\"Expected the first task to have the name \\\"Reset\\\", found \\\"{task_key}\\\"\"\n        \n        \n    assert notebook_path == job_config.notebook, f\"Invalid Notebook Path. Found \\\"{notebook_path}\\\", expected \\\"{job_config.reset_notebook}\\\" \"\n    \n    if not self.is_smoke_test():\n        # Don't check the actual_cluster_id when running as a smoke test\n        \n        assert actual_cluster_id is not None, f\"The first task is not configured to use the current All-Purpose cluster\"\n\n        expected_cluster_id = dbgems.get_tags().get(\"clusterId\")\n        if expected_cluster_id != actual_cluster_id:\n            actual_cluster = self.client.clusters.get(actual_cluster_id).get(\"cluster_name\")\n            expected_cluster = self.client.clusters.get(expected_cluster_id).get(\"cluster_name\")\n            assert actual_cluster_id == expected_cluster_id, f\"The first task is not configured to use the current All-Purpose cluster, expected \\\"{expected_cluster}\\\", found \\\"{actual_cluster}\\\"\"\n        \n    print(\"All tests passed!\")\n","commandVersion":1,"state":"finished","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[],"subcommandOptions":null,"contentSha256Hex":null,"nuid":"42bb1a1a-c36f-415c-82ad-8db274d11068"},{"version":"CommandV1","origId":2730474723967891,"guid":"b87c6591-bb80-45c6-a3f9-9f53a3ffe53f","subtype":"command","commandType":"auto","position":10.0,"command":"@DBAcademyHelper.monkey_patch\ndef create_job_v2(self):\n    \"Provided by DBAcademy, this function creates the prescribed job\"\n    import re\n    \n    job_config = self.get_job_config()\n    pipeline_config = self.get_pipeline_config()\n\n    self.client.jobs.delete_by_name(job_config.job_name, success_only=False)\n    cluster_id = dbgems.get_tags().get(\"clusterId\")\n    \n    pipeline = self.client.pipelines().get_by_name(pipeline_config.pipeline_name)\n    pipeline_id = pipeline.get(\"pipeline_id\")\n    \n    build_name = re.sub(r\"[^a-zA-Z\\d]\", \"-\", self.course_config.course_name)\n    while \"--\" in build_name: build_name = build_name.replace(\"--\", \"-\")\n\n    params = {\n        \"name\": job_config.job_name,\n        \"tags\": {\n            \"dbacademy.course\": build_name,\n            \"dbacademy.source\": build_name\n        },\n        \"email_notifications\": {},\n        \"timeout_seconds\": 7200,\n        \"max_concurrent_runs\": 1,\n        \"format\": \"MULTI_TASK\",\n        \"tasks\": [\n            {\n                \"task_key\": \"Reset\",\n                \"libraries\": [],\n                \"notebook_task\": {\n                    \"notebook_path\": job_config.notebook,\n                    \"base_parameters\": []\n                },\n                \"existing_cluster_id\": cluster_id\n            },\n            {\n                \"task_key\": \"DLT\",\n                \"depends_on\": [ { \"task_key\": \"Reset\" } ],\n                \"pipeline_task\": {\n                    \"pipeline_id\": pipeline_id\n                },\n            },\n        ],\n    }\n    params = self.update_cluster_params(params, [0])\n    \n    create_response = self.client.jobs().create(params)\n    job_id = create_response.get(\"job_id\")\n    \n    print(f\"Created job #{job_id}\")","commandVersion":1,"state":"finished","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[],"subcommandOptions":null,"contentSha256Hex":null,"nuid":"86519bb5-d332-4581-826a-719d74ee5714"},{"version":"CommandV1","origId":2730474723967892,"guid":"73a44390-7e04-4dea-82c6-c1a70987572d","subtype":"command","commandType":"auto","position":11.0,"command":"@DBAcademyHelper.monkey_patch\ndef validate_job_v2_config(self):\n    \"Provided by DBAcademy, this function validates the configuration of the job\"\n    import json\n    \n    pipeline_config = self.get_pipeline_config()\n    job_config = self.get_job_config()\n\n    job = self.client.jobs.get_by_name(job_config.job_name)\n    assert job is not None, f\"The job named \\\"{job_config.job_name}\\\" doesn't exist. Double check the spelling.\"\n    \n    settings = job.get(\"settings\")\n    assert settings.get(\"format\") == \"MULTI_TASK\", f\"Expected two tasks, found 1.\"\n\n    tasks = settings.get(\"tasks\", [])\n    assert len(tasks) == 2, f\"Expected two tasks, found {len(tasks)}.\"\n    \n    \n    # Reset Task\n    task_name = tasks[0].get(\"task_key\", None)\n    assert task_name == \"Reset\", f\"Expected the first task to have the name \\\"Reset\\\", found \\\"{task_name}\\\"\"\n    \n    notebook_path = tasks[0].get(\"notebook_task\", {}).get(\"notebook_path\")\n    assert notebook_path == job_config.notebook, f\"Invalid Notebook Path for the first task. Found \\\"{notebook_path}\\\", expected \\\"{job_config.notebook}\\\" \"\n\n    if not self.is_smoke_test():\n        # Don't check the actual_cluster_id when running as a smoke test\n        \n        actual_cluster_id = tasks[0].get(\"existing_cluster_id\", None)\n        assert actual_cluster_id is not None, f\"The first task is not configured to use the current All-Purpose cluster\"\n\n        expected_cluster_id = dbgems.get_tags().get(\"clusterId\")\n        if expected_cluster_id != actual_cluster_id:\n            actual_cluster = self.client.clusters.get(actual_cluster_id).get(\"cluster_name\")\n            expected_cluster = self.client.clusters.get(expected_cluster_id).get(\"cluster_name\")\n            assert actual_cluster_id == expected_cluster_id, f\"The first task is not configured to use the current All-Purpose cluster, expected \\\"{expected_cluster}\\\", found \\\"{actual_cluster}\\\"\"\n\n    \n    \n    # Reset DLT\n    task_name = tasks[1].get(\"task_key\", None)\n    assert task_name == \"DLT\", f\"Expected the second task to have the name \\\"DLT\\\", found \\\"{task_name}\\\"\"\n\n    actual_pipeline_id = tasks[1].get(\"pipeline_task\", {}).get(\"pipeline_id\", None)\n    assert actual_pipeline_id is not None, f\"The second task is not configured to use a Delta Live Tables pipeline\"\n    \n    expected_pipeline = self.client.pipelines().get_by_name(pipeline_config.pipeline_name)\n    actual_pipeline = self.client.pipelines().get_by_id(actual_pipeline_id)\n    actual_name = actual_pipeline.get(\"spec\").get(\"name\", \"Oops\")\n    assert actual_pipeline_id == expected_pipeline.get(\"pipeline_id\"), f\"The second task is not configured to use the correct pipeline, expected \\\"{pipeline_name}\\\", found \\\"{actual_name}\\\"\"\n    \n    depends_on = tasks[1].get(\"depends_on\", [])\n    assert len(depends_on) > 0, f\"The \\\"DLT\\\" task does not depend on the \\\"Reset\\\" task\"\n    assert len(depends_on) == 1, f\"The \\\"DLT\\\" task depends on more than just the \\\"Reset\\\" task\"\n    depends_task_key = depends_on[0].get(\"task_key\")\n    assert depends_task_key == \"Reset\", f\"The \\\"DLT\\\" task doesn't depend on the \\\"Reset\\\" task, found {depends_task_key}\"\n    \n    print(\"All tests passed!\")\n","commandVersion":1,"state":"finished","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[],"subcommandOptions":null,"contentSha256Hex":null,"nuid":"b762ac0c-0d34-4ddd-be7e-beb489eb2d55"},{"version":"CommandV1","origId":2730474723967893,"guid":"e898f225-7ff6-44c1-8910-4915966a8fb0","subtype":"command","commandType":"auto","position":12.0,"command":"@DBAcademyHelper.monkey_patch\ndef start_job(self):\n    job_config = self.get_job_config()\n    job_id = self.client.jobs.get_by_name(job_config.job_name).get(\"job_id\")\n    run_id = self.client.jobs.run_now(job_id).get(\"run_id\")\n    print(f\"Started job #{job_id}, run #{run_id}\")\n\n    self.client.runs.wait_for(run_id)","commandVersion":1,"state":"finished","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[],"subcommandOptions":null,"contentSha256Hex":null,"nuid":"c6d402f2-4429-499d-a53a-a66936907819"},{"version":"CommandV1","origId":2730474723967894,"guid":"d43e41d2-30c3-4e61-882b-45543fe53b0c","subtype":"command","commandType":"auto","position":13.0,"command":"# The DataFactory is just a pattern to demonstrate a fake stream is more of a function\n# streaming workloads than it is of a pipeline - this pipeline happens to stream data.\nclass DataFactory:\n    def __init__(self):\n        \n        # Bind the stream-source to DA because we will use it again later.\n        DA.paths.stream_source = f\"{DA.paths.working_dir}/stream-source\"\n        \n        self.source_dir = f\"{DA.paths.datasets}\"\n        self.target_dir = DA.paths.stream_source\n        \n        # All three datasets *should* have the same count, but just in case,\n        # We are going to take the smaller count of the three datasets\n        orders_count = len(dbutils.fs.ls(f\"{self.source_dir}/orders/stream_json\"))\n        status_count = len(dbutils.fs.ls(f\"{self.source_dir}/status/stream_json\"))\n        customer_count = len(dbutils.fs.ls(f\"{self.source_dir}/customers/stream_json\"))\n        self.max_batch = min(min(orders_count, status_count), customer_count)\n        \n        self.current_batch = 0\n        \n    def load(self, continuous=False, delay_seconds=5):\n        import time\n        self.start = int(time.time())\n        \n        if self.current_batch >= self.max_batch:\n            print(\"Data source exhausted\\n\")\n            return False\n        elif continuous:\n            while self.load():\n                time.sleep(delay_seconds)\n            return False\n        else:\n            print(f\"Loading batch {self.current_batch+1} of {self.max_batch}\", end=\"...\")\n            self.copy_file(\"customers\")\n            self.copy_file(\"orders\")\n            self.copy_file(\"status\")\n            self.current_batch += 1\n            print(f\"{int(time.time())-self.start} seconds\")\n            return True\n            \n    def copy_file(self, dataset_name):\n        source_file = f\"{self.source_dir}/{dataset_name}/stream_json/{self.current_batch:02}.json/\"\n        target_file = f\"{self.target_dir}/{dataset_name}/{self.current_batch:02}.json\"\n        dbutils.fs.cp(source_file, target_file)","commandVersion":1,"state":"finished","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[],"subcommandOptions":null,"contentSha256Hex":null,"nuid":"7db95beb-a9c6-4aac-bfb8-3ea075d52a6e"},{"version":"CommandV1","origId":2730474723967895,"guid":"26dc0206-154a-4827-a361-9672eac7eca2","subtype":"command","commandType":"auto","position":14.0,"command":"class PipelineConfig():\n    def __init__(self, pipeline_name, notebook):\n        self.pipeline_name = pipeline_name  # The name of the pipeline\n        self.notebook = notebook            # This list of notebooks for this pipeline\n    \n    def __repr__(self):\n        content =  f\"Name:     {self.pipeline_name}\\n\"\n        content += f\"Notebook: {self.notebook}\"\n        return content\n","commandVersion":1,"state":"finished","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[],"subcommandOptions":null,"contentSha256Hex":null,"nuid":"b5fed0d9-7ef9-4b5d-bdb0-51636ae3718e"},{"version":"CommandV1","origId":2730474723967896,"guid":"a28df438-48c0-4205-b71e-5340e3111749","subtype":"command","commandType":"auto","position":15.0,"command":"@DBAcademyHelper.monkey_patch\ndef get_pipeline_config(self):\n    path = dbutils.entry_point.getDbutils().notebook().getContext().notebookPath().getOrElse(None)\n    notebook = \"/\".join(path.split(\"/\")[:-1]) + \"/DE 5.1.3 - DLT Job\"\n    \n    unique_name = DA.unique_name(sep=\"-\")\n    pipeline_name = f\"{unique_name}: Pipeline Demo w/Job\"\n    \n    return PipelineConfig(pipeline_name, notebook)\n","commandVersion":1,"state":"finished","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[],"subcommandOptions":null,"contentSha256Hex":null,"nuid":"4f78d1df-3d48-47fb-be8f-0bc1c35066d6"},{"version":"CommandV1","origId":2730474723967897,"guid":"5ff6b011-79d4-4399-99b2-d293b2230e36","subtype":"command","commandType":"auto","position":16.0,"command":"@DBAcademyHelper.monkey_patch\ndef create_pipeline(self):\n    \"\"\"\n    Creates the prescribed pipeline.\n    \"\"\"\n    from dbacademy.dbhelper.clusters_helper_class import ClustersHelper\n    from dbacademy.dbrest import DBAcademyRestClient\n    \n    client = DBAcademyRestClient()\n\n    config = self.get_pipeline_config()\n    print(f\"Creating the pipeline \\\"{config.pipeline_name}\\\"\")\n\n    # Delete the existing pipeline if it exists\n    client.pipelines().delete_by_name(config.pipeline_name)\n\n    \n    # Create the new pipeline\n    pipeline = client.pipelines().create(\n        name = config.pipeline_name, \n        development=True,\n        storage = self.paths.storage_location, \n        target = self.schema_name, \n        notebooks = [config.notebook], \n        configuration={\n            \"source\": DA.paths.datasets,\n        })\n    \n    self.pipeline_id = pipeline.get(\"pipeline_id\")\n\n    policy = self.client.cluster_policies.get_by_name(ClustersHelper.POLICY_DLT_ONLY)\n    if policy is not None:\n        self.client.pipelines.create_or_update(name = config.pipeline_name,\n                                               storage = self.paths.storage_location,\n                                               target = self.schema_name,\n                                               notebooks = [config.notebook],\n                                               configuration = {\n                                                    \"source\": DA.paths.datasets,\n                                                    \"spark.master\": \"local[*]\",\n                                                },\n                                                clusters=[{ \n                                                    \"num_workers\": 0,\n                                                    \"label\": \"default\", \n                                                    \"policy_id\": policy.get(\"policy_id\")\n                                                }])\n    \n    displayHTML(f\"\"\"<table style=\"width:100%\">\n    <tr>\n        <td style=\"white-space:nowrap; width:1em\">Pipeline Name:</td>\n        <td><input type=\"text\" value=\"{config.pipeline_name}\" style=\"width:100%\"></td></tr>\n\n    </table>\"\"\")    \n","commandVersion":1,"state":"finished","results":null,"resultDbfsStatus":"INLINED_IN_TREE","resultDbfsErrorMessage":null,"errorSummary":null,"errorTraceType":null,"error":null,"workflows":[],"startTime":0,"submitTime":0,"finishTime":0,"collapsed":false,"bindings":{},"inputWidgets":{},"displayType":"table","width":"auto","height":"auto","xColumns":null,"yColumns":null,"pivotColumns":null,"pivotAggregation":null,"useConsistentColors":false,"customPlotOptions":{},"commentThread":[],"commentsVisible":false,"parentHierarchy":[],"diffInserts":[],"diffDeletes":[],"globalVars":{},"latestUser":"a user","latestUserId":null,"commandTitle":"","showCommandTitle":false,"hideCommandCode":false,"hideCommandResult":false,"isLockedInExamMode":false,"iPythonMetadata":null,"metadata":{},"streamStates":{},"datasetPreviewNameToCmdIdMap":{},"tableResultIndex":null,"listResultMetadata":[],"subcommandOptions":null,"contentSha256Hex":null,"nuid":"88bb4ec8-59ce-4fda-ac04-eea0f4acad3a"}],"dashboards":[],"guid":"fa932879-19cd-40b3-8258-1ea31fb33cd8","globalVars":{},"iPythonMetadata":null,"inputWidgets":{},"notebookMetadata":{},"reposExportFormat":"SOURCE"}